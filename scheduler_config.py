#!/usr/bin/env python3
"""
Configura√ß√£o do Scheduler WebScrapStatusQlik

Este arquivo cont√©m todas as configura√ß√µes do scheduler, permitindo
f√°cil customiza√ß√£o de hor√°rios, timeouts e par√¢metros de execu√ß√£o.

Para modificar hor√°rios ou adicionar novas tarefas, edite este arquivo.
"""

from dataclasses import dataclass
from typing import Dict
from pathlib import Path

@dataclass
class TaskConfig:
    """Configura√ß√£o de uma tarefa agendada."""
    name: str
    description: str
    script_path: str
    schedule_time: str
    enabled: bool = True
    timeout: int = 300  # 5 minutos padr√£o
    retry_count: int = 3

# =============================================================================
# CONFIGURA√á√ÉO DAS TAREFAS
# =============================================================================

# Dicion√°rio com todas as tarefas configuradas
TASKS_CONFIG: Dict[str, TaskConfig] = {
    # Monitoramento de status Qlik (executa a cada hora)
    "status_qlik": TaskConfig(
        name="Status Qlik",
        description="Monitoramento de status Qlik (QMC, NPrinting)",
        script_path="crawler_qlik.status_qlik_task",
        schedule_time=":00",  # A cada hora √†s XX:00
        timeout=600,  # 10 minutos
        retry_count=3
    ),
    
    # Gera√ß√£o de relat√≥rios PySQL (05:00)
    "reports_pysql": TaskConfig(
        name="Relat√≥rios PySQL",
        description="Gera√ß√£o de relat√≥rios PySQL (homic√≠dios)",
        script_path="pysql.pysql_homicidios",
        schedule_time="05:00",  # 5h da manh√£
        timeout=1800,  # 30 minutos
        retry_count=2
    ),
    
    # Monitoramento Qlik Desktop (06:00)
    "status_desktop": TaskConfig(
        name="Status Desktop",
        description="Monitoramento Qlik Sense Desktop",
        script_path="crawler_qlik.status_qlik_desktop",
        schedule_time="06:00",  # 6h da manh√£
        timeout=300,  # 5 minutos
        retry_count=3
    ),
    
    # Monitoramento de ETLs (07:00)
    "status_etl": TaskConfig(
        name="Status ETL",
        description="Monitoramento de ETLs",
        script_path="crawler_qlik.status_qlik_etl",
        schedule_time="07:00",  # 7h da manh√£
        timeout=300,  # 5 minutos
        retry_count=3
    ),
    
    # Envio de relat√≥rios Qlik (08:00)
    "send_qlik": TaskConfig(
        name="Envio Qlik",
        description="Envio de relat√≥rios Qlik via Evolution API",
        script_path="evolution_api.send_qlik_evolution",
        schedule_time="08:00",  # 8h da manh√£
        timeout=900,  # 15 minutos
        retry_count=2
    ),
    
    # Envio de relat√≥rios PySQL (08:05)
    "send_pysql": TaskConfig(
        name="Envio PySQL",
        description="Envio de relat√≥rios PySQL via Evolution API",
        script_path="evolution_api.send_pysql_evolution",
        schedule_time="08:05",  # 8h05 da manh√£ (5 min ap√≥s Qlik)
        timeout=900,  # 15 minutos
        retry_count=2
    )
}

# =============================================================================
# CONFIGURA√á√ïES GERAIS
# =============================================================================

# Configura√ß√µes de logging
LOGGING_CONFIG = {
    "log_dir": "logs",
    "log_level": "INFO",
    "log_format": "%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    "max_log_files": 30  # Mant√©m logs dos √∫ltimos 30 dias
}

# Configura√ß√µes de execu√ß√£o
EXECUTION_CONFIG = {
    "check_interval": 30,  # Segundos entre verifica√ß√µes
    "status_interval": 5,  # Minutos entre exibi√ß√µes de status
    "graceful_shutdown": True
}

# =============================================================================
# FUN√á√ïES DE UTILIDADE
# =============================================================================

def get_task_config(task_key: str) -> TaskConfig:
    """
    Obt√©m a configura√ß√£o de uma tarefa espec√≠fica.
    
    Args:
        task_key: Chave da tarefa
        
    Returns:
        TaskConfig: Configura√ß√£o da tarefa
        
    Raises:
        KeyError: Se a tarefa n√£o for encontrada
    """
    if task_key not in TASKS_CONFIG:
        raise KeyError(f"Tarefa '{task_key}' n√£o encontrada na configura√ß√£o")
    return TASKS_CONFIG[task_key]

def get_enabled_tasks() -> Dict[str, TaskConfig]:
    """
    Obt√©m apenas as tarefas habilitadas.
    
    Returns:
        Dict[str, TaskConfig]: Dicion√°rio com tarefas habilitadas
    """
    return {key: task for key, task in TASKS_CONFIG.items() if task.enabled}

def get_disabled_tasks() -> Dict[str, TaskConfig]:
    """
    Obt√©m apenas as tarefas desabilitadas.
    
    Returns:
        Dict[str, TaskConfig]: Dicion√°rio com tarefas desabilitadas
    """
    return {key: task for key, task in TASKS_CONFIG.items() if not task.enabled}

def list_all_tasks() -> None:
    """
    Lista todas as tarefas configuradas no console.
    """
    print("üìã TAREFAS CONFIGURADAS NO SCHEDULER")
    print("=" * 60)
    
    for key, task in TASKS_CONFIG.items():
        status = "‚úÖ HABILITADA" if task.enabled else "‚è∏Ô∏è DESABILITADA"
        print(f"{key}:")
        print(f"  Nome: {task.name}")
        print(f"  Descri√ß√£o: {task.description}")
        print(f"  Script: {task.script_path}")
        print(f"  Hor√°rio: {task.schedule_time}")
        print(f"  Status: {status}")
        print(f"  Timeout: {task.timeout}s")
        print(f"  Retry: {task.retry_count}x")
        print("-" * 40)

if __name__ == "__main__":
    # Se executado diretamente, mostra a configura√ß√£o
    list_all_tasks()
