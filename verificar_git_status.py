#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Script para verificar o status do Git e identificar arquivos que n√£o est√£o sendo rastreados
"""

import subprocess
import os
from pathlib import Path

def executar_comando_git(comando):
    """Executa um comando Git e retorna o resultado."""
    try:
        resultado = subprocess.run(
            comando, 
            shell=True, 
            capture_output=True, 
            text=True, 
            cwd=os.getcwd()
        )
        return resultado.stdout.strip(), resultado.stderr.strip(), resultado.returncode
    except Exception as e:
        return "", str(e), 1

def verificar_status_git():
    """Verifica o status atual do Git."""
    print("üîç Verificando Status do Git")
    print("=" * 50)
    
    # Status geral
    stdout, stderr, code = executar_comando_git("git status")
    if code == 0:
        print("üìã Status Geral:")
        print(stdout)
    else:
        print(f"‚ùå Erro ao verificar status: {stderr}")
        return False
    
    return True

def listar_arquivos_nao_rastreados():
    """Lista arquivos que n√£o est√£o sendo rastreados pelo Git."""
    print("\nüìÅ Arquivos N√£o Rastreados:")
    print("-" * 30)
    
    # Arquivos n√£o rastreados (n√£o ignorados)
    stdout, stderr, code = executar_comando_git("git ls-files --others --exclude-standard")
    if code == 0 and stdout:
        arquivos_nao_rastreados = stdout.split('\n')
        print(f"‚úÖ Encontrados {len(arquivos_nao_rastreados)} arquivos n√£o rastreados:")
        for arquivo in arquivos_nao_rastreados:
            if arquivo.strip():
                print(f"  üìÑ {arquivo}")
    else:
        print("‚ÑπÔ∏è Nenhum arquivo n√£o rastreado encontrado")
    
    # Arquivos ignorados
    print("\nüö´ Arquivos Ignorados:")
    print("-" * 20)
    stdout, stderr, code = executar_comando_git("git ls-files --others --ignored --exclude-standard")
    if code == 0 and stdout:
        arquivos_ignorados = stdout.split('\n')
        print(f"‚ö†Ô∏è Encontrados {len(arquivos_ignorados)} arquivos ignorados:")
        # Mostra apenas os primeiros 10 para n√£o poluir a sa√≠da
        for i, arquivo in enumerate(arquivos_ignorados[:10]):
            if arquivo.strip():
                print(f"  üö´ {arquivo}")
        if len(arquivos_ignorados) > 10:
            print(f"  ... e mais {len(arquivos_ignorados) - 10} arquivos ignorados")
    else:
        print("‚ÑπÔ∏è Nenhum arquivo ignorado encontrado")

def listar_arquivos_modificados():
    """Lista arquivos que foram modificados."""
    print("\nüìù Arquivos Modificados:")
    print("-" * 25)
    
    stdout, stderr, code = executar_comando_git("git status --porcelain")
    if code == 0 and stdout:
        linhas = stdout.split('\n')
        arquivos_modificados = [linha for linha in linhas if linha.strip()]
        print(f"üîÑ Encontrados {len(arquivos_modificados)} arquivos modificados:")
        for linha in arquivos_modificados:
            status = linha[:2]
            arquivo = linha[3:]
            if status == "M ":
                print(f"  üìù Modificado: {arquivo}")
            elif status == " M":
                print(f"  üìù Modificado (n√£o commitado): {arquivo}")
            elif status == "??":
                print(f"  ‚ûï Novo: {arquivo}")
            elif status == "A ":
                print(f"  ‚ûï Adicionado: {arquivo}")
            else:
                print(f"  ‚ùì {status}: {arquivo}")
    else:
        print("‚ÑπÔ∏è Nenhum arquivo modificado encontrado")

def verificar_arquivos_importantes():
    """Verifica se arquivos importantes est√£o sendo rastreados."""
    print("\nüéØ Verificando Arquivos Importantes:")
    print("-" * 35)
    
    arquivos_importantes = [
        "requirements.txt",
        "README.md",
        "INSTALACAO.md",
        "SOLUCAO_ERRO_REDE.md",
        "RESUMO_ATUALIZACOES.md",
        "verificar_dependencias.py",
        "teste_caminhos_unc.py",
        "crawler_qlik/network_config.py",
        "crawler_qlik/status_qlik_desktop.py",
        "crawler_qlik/status_qlik_etl.py",
        "evolution_api/send_qlik_evolution.py",
        ".env_exemple"
    ]
    
    for arquivo in arquivos_importantes:
        if os.path.exists(arquivo):
            stdout, stderr, code = executar_comando_git(f"git ls-files {arquivo}")
            if code == 0 and stdout.strip():
                print(f"  ‚úÖ {arquivo} - Rastreado")
            else:
                print(f"  ‚ùå {arquivo} - N√ÉO rastreado")
        else:
            print(f"  ‚ö†Ô∏è {arquivo} - N√£o existe")

def sugerir_comandos():
    """Sugere comandos para adicionar arquivos ao Git."""
    print("\nüí° Sugest√µes de Comandos:")
    print("-" * 25)
    
    print("Para adicionar todos os arquivos n√£o rastreados:")
    print("  git add .")
    print()
    
    print("Para adicionar arquivos espec√≠ficos:")
    print("  git add requirements.txt")
    print("  git add INSTALACAO.md")
    print("  git add RESUMO_ATUALIZACOES.md")
    print("  git add verificar_dependencias.py")
    print("  git add teste_caminhos_unc.py")
    print()
    
    print("Para verificar o que ser√° commitado:")
    print("  git status")
    print()
    
    print("Para fazer commit das mudan√ßas:")
    print("  git commit -m \"Atualiza√ß√£o: novos arquivos e documenta√ß√£o\"")
    print()
    
    print("Para enviar para o reposit√≥rio remoto:")
    print("  git push origin main")

def main():
    """Fun√ß√£o principal."""
    print("üîç Verifica√ß√£o Completa do Status do Git")
    print("=" * 50)
    
    # Verifica se estamos em um reposit√≥rio Git
    stdout, stderr, code = executar_comando_git("git rev-parse --git-dir")
    if code != 0:
        print("‚ùå Erro: N√£o estamos em um reposit√≥rio Git!")
        print("üí° Execute: git init")
        return False
    
    # Executa todas as verifica√ß√µes
    verificar_status_git()
    listar_arquivos_nao_rastreados()
    listar_arquivos_modificados()
    verificar_arquivos_importantes()
    sugerir_comandos()
    
    print("\n" + "=" * 50)
    print("‚úÖ Verifica√ß√£o conclu√≠da!")
    
    return True

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è Verifica√ß√£o interrompida pelo usu√°rio.")
    except Exception as e:
        print(f"\n‚ùå Erro durante a verifica√ß√£o: {e}")
