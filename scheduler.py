#!/usr/bin/env python3
"""
Scheduler para automa√ß√£o de tarefas WebScrapStatusQlik

Este m√≥dulo gerencia a execu√ß√£o autom√°tica de scripts de monitoramento e envio
de relat√≥rios do sistema WebScrapStatusQlik.

Funcionalidades:
- Monitoramento de status Qlik (QMC, NPrinting, Desktop, ETL) a cada hora
- Gera√ß√£o de relat√≥rios PySQL di√°rios
- Envio autom√°tico de relat√≥rios via Evolution API
- Logging detalhado de execu√ß√£o
- Configura√ß√£o centralizada de hor√°rios

Autor: Sistema WebScrapStatusQlik
Data: 2024
"""

import schedule
import time
import subprocess
import logging
import sys
import os
from datetime import datetime, timedelta
from pathlib import Path
from typing import Dict, List, Optional, Callable
import glob

# Importa configura√ß√µes
from scheduler_config import TASKS_CONFIG, LOGGING_CONFIG, EXECUTION_CONFIG

# =============================================================================
# CONFIGURA√á√ÉO DE LOGGING
# =============================================================================

def setup_logging() -> logging.Logger:
    """
    Configura o sistema de logging para o scheduler.
    
    Returns:
        logging.Logger: Logger configurado
    """
    # Cria diret√≥rio de logs se n√£o existir
    log_dir = Path(LOGGING_CONFIG["log_dir"])
    log_dir.mkdir(exist_ok=True)
    
    # Configura o logger
    logger = logging.getLogger("WebScrapScheduler")
    logger.setLevel(getattr(logging, LOGGING_CONFIG["log_level"]))
    
    # Limpa handlers existentes
    logger.handlers.clear()
    
    # Handler para arquivo
    file_handler = logging.FileHandler(
        log_dir / f"scheduler_{datetime.now().strftime('%Y%m%d')}.log",
        encoding='utf-8'
    )
    file_handler.setLevel(getattr(logging, LOGGING_CONFIG["log_level"]))
    
    # Handler para console
    console_handler = logging.StreamHandler()
    console_handler.setLevel(getattr(logging, LOGGING_CONFIG["log_level"]))
    
    # Formato das mensagens
    formatter = logging.Formatter(LOGGING_CONFIG["log_format"])
    file_handler.setFormatter(formatter)
    console_handler.setFormatter(formatter)
    
    # Adiciona handlers ao logger
    logger.addHandler(file_handler)
    logger.addHandler(console_handler)
    
    return logger

# =============================================================================
# EXECUTOR DE TAREFAS
# =============================================================================

class TaskExecutor:
    """Executor de tarefas com retry e logging."""
    
    def __init__(self, logger: logging.Logger):
        self.logger = logger
        self.python_exec = sys.executable
        self.project_root = Path(__file__).parent
        self.execution_history: List[Dict] = []
    
    def execute_task(self, task_key: str) -> bool:
        """
        Executa uma tarefa espec√≠fica com retry e logging.
        
        Args:
            task_key: Chave da tarefa na configura√ß√£o
            
        Returns:
            bool: True se executou com sucesso, False caso contr√°rio
        """
        task = TASKS_CONFIG.get(task_key)
        if not task or not task.enabled:
            self.logger.warning(f"Tarefa {task_key} n√£o encontrada ou desabilitada")
            return False
        
        self.logger.info(f"üöÄ Iniciando execu√ß√£o: {task.name}")
        self.logger.info(f"   üìù Descri√ß√£o: {task.description}")
        self.logger.info(f"   üìÅ Script: {task.script_path}")
        self.logger.info(f"   ‚è∞ Timeout: {task.timeout}s")
        
        start_time = datetime.now()
        success = False
        error_message = ""
        
        # Tenta executar com retry
        for attempt in range(task.retry_count):
            try:
                self.logger.info(f"   üîÑ Tentativa {attempt + 1}/{task.retry_count}")
                
                # Executa o script
                result = subprocess.run(
                    [self.python_exec, "-m", task.script_path],
                    capture_output=True,
                    text=True,
                    timeout=task.timeout,
                    cwd=self.project_root
                )
                
                if result.returncode == 0:
                    success = True
                    self.logger.info(f"‚úÖ {task.name} executado com sucesso")
                    if result.stdout.strip():
                        self.logger.debug(f"   üì§ Sa√≠da: {result.stdout.strip()}")
                    break
                else:
                    error_message = f"C√≥digo de retorno {result.returncode}: {result.stderr.strip()}"
                    self.logger.warning(f"   ‚ö†Ô∏è Tentativa {attempt + 1} falhou: {error_message}")
                    
            except subprocess.TimeoutExpired:
                error_message = f"Timeout ap√≥s {task.timeout}s"
                self.logger.error(f"   ‚è∞ Tentativa {attempt + 1} expirou: {error_message}")
            except Exception as e:
                error_message = str(e)
                self.logger.error(f"   ‚ùå Tentativa {attempt + 1} com erro: {error_message}")
        
        # Registra resultado
        execution_time = (datetime.now() - start_time).total_seconds()
        self.execution_history.append({
            "task": task_key,
            "name": task.name,
            "start_time": start_time,
            "execution_time": execution_time,
            "success": success,
            "error": error_message if not success else None
        })
        
        if success:
            self.logger.info(f"‚úÖ {task.name} finalizado em {execution_time:.2f}s")
        else:
            self.logger.error(f"‚ùå {task.name} falhou ap√≥s {task.retry_count} tentativas")
            self.logger.error(f"   üí¨ √öltimo erro: {error_message}")
        
        return success

# =============================================================================
# AGENDADOR PRINCIPAL
# =============================================================================

class WebScrapScheduler:
    """Agendador principal do sistema WebScrapStatusQlik."""
    
    def __init__(self):
        self.logger = setup_logging()
        self.executor = TaskExecutor(self.logger)
        self.running = False
        
        self.logger.info("üîß Inicializando WebScrapScheduler")
        self.logger.info(f"   üêç Python: {self.executor.python_exec}")
        self.logger.info(f"   üìÅ Projeto: {self.executor.project_root}")
    
    def setup_schedule(self):
        """Configura o agendamento das tarefas."""
        self.logger.info("üìÖ Configurando agendamento das tarefas...")
        
        for task_key, task in TASKS_CONFIG.items():
            if not task.enabled:
                self.logger.info(f"   ‚è∏Ô∏è {task.name} - DESABILITADA")
                continue
            
            # Cria fun√ß√£o wrapper para a tarefa
            def create_task_wrapper(task_key):
                def task_wrapper():
                    self.executor.execute_task(task_key)
                task_wrapper.__name__ = f"task_wrapper_{task_key}"
                return task_wrapper
            
            # Configura o agendamento
            if task.schedule_time.startswith(":"):
                # A cada hora
                schedule.every().hour.at(task.schedule_time).do(create_task_wrapper(task_key))
                self.logger.info(f"   üîÑ {task.name} - A cada hora √†s {task.schedule_time}")
            else:
                # Hor√°rio espec√≠fico
                schedule.every().day.at(task.schedule_time).do(create_task_wrapper(task_key))
                self.logger.info(f"   üìÖ {task.name} - Di√°rio √†s {task.schedule_time}")
    
    def get_next_runs(self) -> Dict[str, str]:
        """Obt√©m os pr√≥ximos hor√°rios de execu√ß√£o de todas as tarefas."""
        next_runs = {}
        
        for task_key, task in TASKS_CONFIG.items():
            if not task.enabled:
                next_runs[task_key] = "DESABILITADA"
                continue
            
            jobs = [job for job in schedule.get_jobs() 
                   if getattr(job.job_func, "__name__", "") == f"task_wrapper_{task_key}"]
            
            if jobs and jobs[0].next_run:
                next_runs[task_key] = jobs[0].next_run.strftime("%H:%M:%S")
            else:
                next_runs[task_key] = "N/A"
        
        return next_runs
    
    def print_status(self):
        """Imprime o status atual do scheduler."""
        now = datetime.now().strftime("%H:%M:%S")
        next_runs = self.get_next_runs()
        
        print(f"\n{'='*80}")
        print(f"üìä STATUS DO SCHEDULER - {now}")
        print(f"{'='*80}")
        
        for task_key, task in TASKS_CONFIG.items():
            status = "‚úÖ" if task.enabled else "‚è∏Ô∏è"
            next_run = next_runs.get(task_key, "N/A")
            print(f"{status} {task.name:<20} | Pr√≥xima execu√ß√£o: {next_run}")
        
        print(f"{'='*80}")
    
    def run(self):
        """Executa o scheduler principal."""
        self.logger.info("üöÄ Iniciando WebScrapScheduler")
        self.setup_schedule()
        
        self.running = True
        self.logger.info("‚úÖ Scheduler iniciado. Pressione Ctrl+C para sair.")
        
        try:
            while self.running:
                schedule.run_pending()
                time.sleep(EXECUTION_CONFIG["check_interval"])
                
                # Mostra status a cada X minutos
                if (datetime.now().minute % EXECUTION_CONFIG["status_interval"] == 0 and 
                    datetime.now().second < 30):
                    self.print_status()
                    
        except KeyboardInterrupt:
            self.logger.info("üõë Scheduler interrompido pelo usu√°rio")
        except Exception as e:
            self.logger.error(f"‚ùå Erro no scheduler: {e}")
            raise
        finally:
            self.running = False
            self.logger.info("üèÅ Scheduler finalizado")

# =============================================================================
# FUN√á√ÉO PRINCIPAL
# =============================================================================

def main():
    """Fun√ß√£o principal do scheduler."""
    scheduler = WebScrapScheduler()
    scheduler.run()

if __name__ == "__main__":
    main()