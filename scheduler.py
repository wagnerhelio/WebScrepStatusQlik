#!/usr/bin/env python3
"""
Scheduler Simplificado para WebScrapStatusQlik

Este m√≥dulo gerencia a execu√ß√£o autom√°tica de scripts de monitoramento e envio
de relat√≥rios do sistema WebScrapStatusQlik.

Cronograma:
- A cada hora: Monitoramento de status Qlik (QMC, NPrinting)
- 12:00 PM: Envio de relat√≥rios Qlik via Evolution API
- Ap√≥s envio Qlik: Envio de relat√≥rios PySQL via Evolution API

Funcionalidades:
- Execu√ß√£o sequencial de tarefas (sem hor√°rios fixos)
- Monitoramento de status Qlik a cada hora
- Envio autom√°tico de relat√≥rios via Evolution API
- Logging detalhado de execu√ß√£o
- Retry autom√°tico em caso de falhas

Autor: Sistema WebScrapStatusQlik
Data: 2024
"""

import schedule
import time
import subprocess
import logging
import sys
import os
from datetime import datetime, timedelta
from pathlib import Path
from typing import Dict, List, Optional
from dataclasses import dataclass

# Configura√ß√£o para Windows - suporte a UTF-8
if os.name == 'nt':  # Windows
    try:
        # Tenta configurar o console para UTF-8
        os.system('chcp 65001 > nul')
    except:
        pass

# =============================================================================
# CONFIGURA√á√ÉO DAS TAREFAS
# =============================================================================

@dataclass
class TaskConfig:
    """Configura√ß√£o de uma tarefa agendada."""
    name: str
    description: str
    script_path: str
    enabled: bool = True
    timeout: int = 300  # 5 minutos padr√£o
    retry_count: int = 3

# Configura√ß√£o das tarefas
TASKS = {
    # Monitoramento de status Qlik (executa a cada hora)
    "status_qlik": TaskConfig(
        name="Status Qlik",
        description="Monitoramento de status Qlik (QMC, NPrinting)",
        script_path="crawler_qlik.status_qlik_task",
        timeout=600,  # 10 minutos
        retry_count=3
    ),
    
    # Envio de relat√≥rios Qlik (08:00)
    "send_qlik": TaskConfig(
        name="Envio Qlik",
        description="Envio de relat√≥rios Qlik via Evolution API",
        script_path="evolution_api.send_qlik_evolution",
        timeout=900,  # 15 minutos
        retry_count=2
    ),
    
    # Envio de relat√≥rios PySQL (ap√≥s Qlik)
    "send_pysql": TaskConfig(
        name="Envio PySQL",
        description="Envio de relat√≥rios PySQL via Evolution API",
        script_path="evolution_api.send_pysql_evolution",
        timeout=900,  # 15 minutos
        retry_count=2
    )
}

# =============================================================================
# CONFIGURA√á√ïES GERAIS
# =============================================================================

# Configura√ß√µes de logging
LOG_DIR = "scheduler_logs"
LOG_LEVEL = "INFO"
LOG_FORMAT = "%(asctime)s - %(name)s - %(levelname)s - %(message)s"

# Configura√ß√µes de execu√ß√£o
CHECK_INTERVAL = 30  # Segundos entre verifica√ß√µes
STATUS_INTERVAL = 5  # Minutos entre exibi√ß√µes de status

# =============================================================================
# CONFIGURA√á√ÉO DE LOGGING
# =============================================================================

def setup_logging() -> logging.Logger:
    """
    Configura o sistema de logging para o scheduler.
    
    Returns:
        logging.Logger: Logger configurado
    """
    # Cria diret√≥rio de logs se n√£o existir
    log_dir = Path(LOG_DIR)
    log_dir.mkdir(exist_ok=True)
    
    # Configura o logger
    logger = logging.getLogger("WebScrapScheduler")
    logger.setLevel(getattr(logging, LOG_LEVEL))
    
    # Limpa handlers existentes
    logger.handlers.clear()
    
    # Handler para arquivo
    file_handler = logging.FileHandler(
        log_dir / f"scheduler_{datetime.now().strftime('%Y%m%d')}.log",
        encoding='utf-8'
    )
    file_handler.setLevel(getattr(logging, LOG_LEVEL))
    
    # Handler para console
    console_handler = logging.StreamHandler()
    console_handler.setLevel(getattr(logging, LOG_LEVEL))
    
    # Formato das mensagens
    formatter = logging.Formatter(LOG_FORMAT)
    file_handler.setFormatter(formatter)
    console_handler.setFormatter(formatter)
    
    # Adiciona handlers ao logger
    logger.addHandler(file_handler)
    logger.addHandler(console_handler)
    
    return logger

# =============================================================================
# EXECUTOR DE TAREFAS
# =============================================================================

class TaskExecutor:
    """Executor de tarefas com retry e logging."""
    
    def __init__(self, logger: logging.Logger):
        self.logger = logger
        self.python_exec = sys.executable
        self.project_root = Path(__file__).parent
        self.execution_history: List[Dict] = []
    
    def check_script_encoding(self, script_path: str) -> bool:
        """
        Verifica se o script tem problemas de codifica√ß√£o.
        
        Args:
            script_path: Caminho do script a ser verificado
            
        Returns:
            bool: True se o script est√° OK, False se h√° problemas
        """
        try:
            # Converte o caminho do m√≥dulo para caminho de arquivo
            module_parts = script_path.split('.')
            script_file = self.project_root / '/'.join(module_parts) + '.py'
            
            if not script_file.exists():
                self.logger.warning(f"   ‚ö†Ô∏è Arquivo n√£o encontrado: {script_file}")
                return False
            
            # Tenta ler o arquivo com diferentes codifica√ß√µes
            encodings = ['utf-8', 'cp1252', 'latin-1']
            
            for encoding in encodings:
                try:
                    with open(script_file, 'r', encoding=encoding) as f:
                        content = f.read()
                        # Verifica se h√° emojis problem√°ticos
                        if any(ord(char) > 127 for char in content):
                            self.logger.info(f"   üìù Script usa caracteres especiais (codifica√ß√£o: {encoding})")
                        return True
                except UnicodeDecodeError:
                    continue
            
            self.logger.warning(f"   ‚ö†Ô∏è N√£o foi poss√≠vel ler o arquivo com nenhuma codifica√ß√£o")
            return False
            
        except Exception as e:
            self.logger.warning(f"   ‚ö†Ô∏è Erro ao verificar codifica√ß√£o: {e}")
            return True  # Assume que est√° OK se n√£o conseguir verificar
    
    def execute_task(self, task_key: str) -> bool:
        """
        Executa uma tarefa espec√≠fica com retry e logging.
        
        Args:
            task_key: Chave da tarefa na configura√ß√£o
            
        Returns:
            bool: True se executou com sucesso, False caso contr√°rio
        """
        task = TASKS.get(task_key)
        if not task or not task.enabled:
            self.logger.warning(f"Tarefa {task_key} n√£o encontrada ou desabilitada")
            return False
        
        self.logger.info(f"üöÄ Iniciando execu√ß√£o: {task.name}")
        self.logger.info(f"   üìù Descri√ß√£o: {task.description}")
        self.logger.info(f"   üìÅ Script: {task.script_path}")
        self.logger.info(f"   ‚è∞ Timeout: {task.timeout}s")
        
        # Verifica codifica√ß√£o do script
        self.check_script_encoding(task.script_path)
        
        start_time = datetime.now()
        success = False
        error_message = ""
        
        # Tenta executar com retry
        for attempt in range(task.retry_count):
            try:
                self.logger.info(f"   üîÑ Tentativa {attempt + 1}/{task.retry_count}")
                
                # Executa o script com codifica√ß√£o UTF-8 para evitar problemas com emojis
                env = os.environ.copy()
                env['PYTHONIOENCODING'] = 'utf-8'
                
                # Para scripts PySQL e Qlik, n√£o captura sa√≠da para mostrar progresso em tempo real
                if task_key in ["send_pysql", "send_qlik"]:
                    result = subprocess.run(
                        [self.python_exec, "-m", task.script_path],
                        capture_output=False,  # Permite que a sa√≠da apare√ßa no terminal
                        text=True,
                        encoding='utf-8',
                        timeout=task.timeout,
                        cwd=self.project_root,
                        env=env
                    )
                else:
                    result = subprocess.run(
                        [self.python_exec, "-m", task.script_path],
                        capture_output=True,
                        text=True,
                        encoding='utf-8',
                        timeout=task.timeout,
                        cwd=self.project_root,
                        env=env
                    )
                
                if result.returncode == 0:
                    success = True
                    self.logger.info(f"‚úÖ {task.name} executado com sucesso")
                    if result.stdout.strip():
                        self.logger.debug(f"   üì§ Sa√≠da: {result.stdout.strip()}")
                    break
                else:
                    # Trata erros de codifica√ß√£o especificamente
                    stderr_output = result.stderr.strip()
                    if "UnicodeEncodeError" in stderr_output or "charmap" in stderr_output:
                        error_message = f"Erro de codifica√ß√£o Unicode - verifique se o script suporta UTF-8"
                        self.logger.warning(f"   ‚ö†Ô∏è Tentativa {attempt + 1} falhou: {error_message}")
                        self.logger.debug(f"   üìã Detalhes: {stderr_output[:200]}...")
                    else:
                        error_message = f"C√≥digo de retorno {result.returncode}: {stderr_output}"
                        self.logger.warning(f"   ‚ö†Ô∏è Tentativa {attempt + 1} falhou: {error_message}")
                    
            except subprocess.TimeoutExpired:
                error_message = f"Timeout ap√≥s {task.timeout}s"
                self.logger.error(f"   ‚è∞ Tentativa {attempt + 1} expirou: {error_message}")
            except Exception as e:
                error_message = str(e)
                self.logger.error(f"   ‚ùå Tentativa {attempt + 1} com erro: {error_message}")
        
        # Registra resultado
        execution_time = (datetime.now() - start_time).total_seconds()
        self.execution_history.append({
            "task": task_key,
            "name": task.name,
            "start_time": start_time,
            "execution_time": execution_time,
            "success": success,
            "error": error_message if not success else None
        })
        
        if success:
            self.logger.info(f"‚úÖ {task.name} finalizado em {execution_time:.2f}s")
        else:
            self.logger.error(f"‚ùå {task.name} falhou ap√≥s {task.retry_count} tentativas")
            self.logger.error(f"   üí¨ √öltimo erro: {error_message}")
        
        return success

# =============================================================================
# AGENDADOR PRINCIPAL
# =============================================================================

class WebScrapScheduler:
    """Agendador principal do sistema WebScrapStatusQlik."""
    
    def __init__(self):
        self.logger = setup_logging()
        self.executor = TaskExecutor(self.logger)
        self.running = False
        self.last_hourly_run = None
        self.last_daily_run = None
        
        self.logger.info("üîß Inicializando WebScrapScheduler")
        self.logger.info(f"   üêç Python: {self.executor.python_exec}")
        self.logger.info(f"   üìÅ Projeto: {self.executor.project_root}")
    
    def should_run_hourly_task(self) -> bool:
        """
        Verifica se deve executar a tarefa hor√°ria (status Qlik).
        
        Returns:
            bool: True se deve executar, False caso contr√°rio
        """
        now = datetime.now()
        
        # Se nunca executou, executa imediatamente
        if self.last_hourly_run is None:
            return True
        
        # Verifica se passou pelo menos 1 hora desde a √∫ltima execu√ß√£o
        time_diff = now - self.last_hourly_run
        return time_diff.total_seconds() >= 3600  # 1 hora
    
    def should_run_daily_tasks(self) -> bool:
        """
        Verifica se deve executar as tarefas di√°rias (envio de relat√≥rios).
        
        Returns:
            bool: True se deve executar, False caso contr√°rio
        """
        now = datetime.now()
        
        # Executa √†s 12:00
        if now.hour == 13 and now.minute == 22:
            # Verifica se j√° executou hoje
            if self.last_daily_run is None or self.last_daily_run.date() != now.date():
                return True
        
        return False
    
    def run_hourly_task(self):
        """Executa a tarefa hor√°ria (status Qlik)."""
        self.logger.info("üïê Executando tarefa hor√°ria: Status Qlik")
        success = self.executor.execute_task("status_qlik")
        if success:
            self.last_hourly_run = datetime.now()
            self.logger.info("‚úÖ Tarefa hor√°ria conclu√≠da com sucesso")
        else:
            self.logger.error("‚ùå Tarefa hor√°ria falhou")
    
    def run_daily_tasks(self):
        """Executa as tarefas di√°rias sequencialmente."""
        self.logger.info("üåÖ Executando tarefas di√°rias: Envio de relat√≥rios")
        
        # 1. Envia relat√≥rios Qlik
        self.logger.info("üì§ Iniciando envio de relat√≥rios Qlik...")
        success_qlik = self.executor.execute_task("send_qlik")
        
        if success_qlik:
            self.logger.info("‚úÖ Envio Qlik conclu√≠do, iniciando PySQL...")
            
            # 2. Envia relat√≥rios PySQL (ap√≥s Qlik)
            self.logger.info("üì§ Iniciando envio de relat√≥rios PySQL...")
            success_pysql = self.executor.execute_task("send_pysql")
            
            if success_pysql:
                self.logger.info("‚úÖ Todas as tarefas di√°rias conclu√≠das com sucesso")
                self.last_daily_run = datetime.now()
            else:
                self.logger.error("‚ùå Envio PySQL falhou")
        else:
            self.logger.error("‚ùå Envio Qlik falhou, PySQL n√£o ser√° executado")
    
    def print_status(self):
        """Imprime o status atual do scheduler."""
        now = datetime.now().strftime("%H:%M:%S")
        
        print(f"\n{'='*80}")
        print(f"üìä STATUS DO SCHEDULER - {now}")
        print(f"{'='*80}")
        
        # Status das tarefas
        for task_key, task in TASKS.items():
            status = "‚úÖ" if task.enabled else "‚è∏Ô∏è"
            print(f"{status} {task.name:<20} | {task.description}")
        
        # Status das execu√ß√µes
        print(f"\nüìà √öLTIMAS EXECU√á√ïES:")
        if self.last_hourly_run:
            print(f"   üïê Status Qlik: {self.last_hourly_run.strftime('%d/%m/%Y %H:%M:%S')}")
        else:
            print(f"   üïê Status Qlik: Nunca executado")
            
        if self.last_daily_run:
            print(f"   üåÖ Relat√≥rios: {self.last_daily_run.strftime('%d/%m/%Y %H:%M:%S')}")
        else:
            print(f"   üåÖ Relat√≥rios: Nunca executado")
        
        print(f"{'='*80}")
    
    def run(self):
        """Executa o scheduler principal."""
        self.logger.info("üöÄ Iniciando WebScrapScheduler")
        self.logger.info("üìÖ Cronograma configurado:")
        self.logger.info("   üïê A cada hora: Status Qlik")
        self.logger.info("   üåÖ 08:00 AM: Envio Qlik ‚Üí Envio PySQL")
        
        self.running = True
        self.logger.info("‚úÖ Scheduler iniciado. Pressione Ctrl+C para sair.")
        
        try:
            while self.running:
                # Verifica tarefa hor√°ria
                if self.should_run_hourly_task():
                    self.run_hourly_task()
                
                # Verifica tarefas di√°rias
                if self.should_run_daily_tasks():
                    self.run_daily_tasks()
                
                # Aguarda pr√≥ximo ciclo
                time.sleep(CHECK_INTERVAL)
                
                # Mostra status a cada X minutos
                if (datetime.now().minute % STATUS_INTERVAL == 0 and 
                    datetime.now().second < 30):
                    self.print_status()
                    
        except KeyboardInterrupt:
            self.logger.info("üõë Scheduler interrompido pelo usu√°rio")
        except Exception as e:
            self.logger.error(f"‚ùå Erro no scheduler: {e}")
            raise
        finally:
            self.running = False
            self.logger.info("üèÅ Scheduler finalizado")

# =============================================================================
# FUN√á√ÉO PRINCIPAL
# =============================================================================

def main():
    """Fun√ß√£o principal do scheduler."""
    scheduler = WebScrapScheduler()
    scheduler.run()

if __name__ == "__main__":
    main()